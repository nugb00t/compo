#ifndef HOLDER_INCLUDED
#define HOLDER_INCLUDED

#include "utility/safe_bool.h"

namespace engine {

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
class Holder {
public:
	static T& get();

private:
	// invoked in T's ctor
	static void set(T& t);

	static T*& subject();

	static bool valid();

	friend T;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
T& Holder<T>::get() { 
	return *subject(); 
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
void Holder<T>::set(T& t) {
	assert(!subject());
	subject() = &t;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
T*& Holder<T>::subject() {
	static T* t = 0;
	return t;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
bool Holder<T>::valid() {
	return subject() != 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

#endif
